<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\ProductionReport;
use App\SupervisorStockAssign;
use App\Helpers\PdfHelper;
use App\ContractRemark;
use App\Http\Requests\ProductionReportRequest;


class TechnicianController extends Controller
{
    public function __construct()
    {
    	$this->middleware('auth:technician');
    }

    public function index()
    {

    	$technician = auth()->guard('technician')->user();
    	$stockassign = SupervisorStockAssign::where('technician_id',$technician->id)
        ->Orwhere('status','Assigned to Stock')->orWhere('status','Stock Assigned')->orWhere('status','Stock Drafted')->orderBy('created_at','desc')->get();

        //return $stockassign;
       return view('technician.new_task',compact('technician','stockassign'));
        

    }
    public function assembled_contract($stockassign_id)
    {
        $assembled = SupervisorStockAssign::find($stockassign_id);
        $assembled->status = "Assembled";
        $assembled->save();

        ContractRemark::create([
                'action_taken_by' => get_guard(),
                'contract_id' => $assembled->contract->id,
                'status'      => 'Product Assembled',
                'remark'      =>  'Product Assembled By Technician',

            ]);

        return response()->json('success');
    }
    public function assembled()
    {
        $technician = auth()->guard('technician')->user();

        $stockassign = SupervisorStockAssign::where('technician_id',$technician->id)
        ->where('status','Assembled')
        ->orWhere('status','Issue Found In Testing')
        ->orWhere('status','Issue Solved')
        ->groupBy('status')
        ->get();
       
       // return $stockassign;
        return view('technician.technician_assembled',compact('technician','stockassign'));
    }

    //supervisor assign stock pdf
    public function stockAssignPdf($id)
    {
        $pdf = PdfHelper::supervisorStockAssignPdf($id);

       // return $pdf;
        return $pdf->stream();
    }

    //issue solved return product to tester
    public function returnToTester($id)
    {
        SupervisorStockAssign::where('id',$id)
        ->update(['status'=>'Issue Solved']);
    }
    public function production_report(ProductionReportRequest $request)
    {

        //return $request;

        $new_production_report = new ProductionReport();

        $new_production_report->supervisor_stock_assign_id = $request->control_id;
        $new_production_report->control_no = $request->control_no;
        $new_production_report->start_date = \Carbon\Carbon::parse($request->work_starting_date);
        $new_production_report->drive_sr_no = $request->drive_sr_no;
        $new_production_report->technical_change = $request->technical_changes;
        $new_production_report->approved_by = $request->approved_by;
        $new_production_report->approved_date = \Carbon\Carbon::parse($request->approved_date);
        $new_production_report->product_name = $request->product_name;
        $new_production_report->remark = $request->remark;

        $new_production_report->save();
       // return $new_production_report;
        // ProductionReport::updateOrCreate(['supervisor_stock_assign_id'=>$request->control_id],[

        //     'supervisor_stock_assign_id' => $request->control_id,
        //     'control_no'                 => $request->control_no,
        //     'start_date'                 => \Carbon\Carbon::parse($request->work_starting_date),
        //     'drive_sr_no'                => $request->drive_sr_no,
        //     'technical_change'           => $request->technical_changes,
        //     'approved_by'                => $request->approved_by,
        //     'approved_date'              => \Carbon\Carbon::parse($request->approved_date),
        //     'product_name'               => $request->product_name,
        //     'remark'                     => $request->remark,

        // ]);
        
        $assembled = SupervisorStockAssign::find($request->control_id);
        $assembled->status = "Assembled";
        $assembled->save();

        ContractRemark::create([
                'action_taken_by' => get_guard(),
                'contract_id' => $request->contract_id,
                'status'      => 'Production Report Generated',
                'remark'      =>  'Production Report Generated By Technician',

            ]);
        return redirect('/technician/assembled_technician');


    }

    public function production_report_pdf($id)
    {
        

        $pdf = PdfHelper::production_report_pdf($id);

        return $pdf->stream();

    }

    public function technician_product_assigned($id){
        $pdf = PdfHelper::getProductAssignedToTech($id);
        return $pdf->stream();
    }

    public function getAllStock($id){
        $supervisorStockAssign = SupervisorStockAssign::find($id);
        $supervisorStockAssign->status = 'Stock Assigned';
        $supervisorStockAssign->save();
    }
}
